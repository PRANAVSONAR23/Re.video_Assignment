import DefaultPlugin from '../plugin/DefaultPlugin';
import { setAssetBase } from '../utils';
import { Logger } from './Logger';
import { ProjectMetadata } from './ProjectMetadata';
import { createSettingsMetadata } from './SettingsMetadata';
/**
 * Bootstrap a project.
 *
 * @param name - The name of the project.
 * @param versions - Package versions.
 * @param plugins - Loaded plugins.
 * @param config - Project settings.
 * @param metaFile - The project meta file.
 * @param settingsFile - The settings meta file.
 * @param logger - An optional logger instance.
 *
 * @internal
 */
export function bootstrap(name, versions, plugins, config, metaFile, settingsFile, logger = config.logger ?? new Logger()) {
    const settings = createSettingsMetadata();
    settingsFile.attach(settings);
    const project = {
        name,
        ...config,
        plugins,
        versions,
        settings,
        logger,
        setAssetBase: setAssetBase,
    };
    project.meta = new ProjectMetadata(project);
    project.meta.shared.set(settings.defaults.get());
    project.experimentalFeatures ?? (project.experimentalFeatures = false);
    metaFile.attach(project.meta);
    return project;
}
/**
 * Bootstrap a project together with all editor plugins.
 *
 * @param name - The name of the project.
 * @param versions - Package versions.
 * @param plugins - Loaded plugins.
 * @param config - Project settings.
 * @param metaFile - The project meta file.
 * @param settingsFile - The settings meta file.
 *
 * @internal
 */
export async function editorBootstrap(name, versions, plugins, config, metaFile, settingsFile) {
    const logger = config.logger ?? new Logger();
    const promises = [Promise.resolve(DefaultPlugin())];
    if (config.plugins) {
        for (const plugin of config.plugins) {
            promises.push(parsePlugin(plugin, logger));
        }
    }
    for (const scene of config.scenes) {
        if (scene.plugins) {
            for (const plugin of scene.plugins) {
                promises.push(parsePlugin(plugin, logger));
            }
        }
    }
    for (const plugin of plugins) {
        promises.push(parsePlugin(plugin, logger));
    }
    const pluginSet = new Set();
    const resolvedPlugins = await Promise.all(promises);
    const includedPlugins = [];
    let resolvedConfig = config;
    for (const plugin of resolvedPlugins) {
        if (!plugin || pluginSet.has(plugin.name)) {
            continue;
        }
        pluginSet.add(plugin.name);
        includedPlugins.push(plugin);
        resolvedConfig = {
            ...resolvedConfig,
            ...(plugin.settings?.(resolvedConfig) ?? {}),
        };
    }
    const project = bootstrap(name, versions, includedPlugins, resolvedConfig, metaFile, settingsFile);
    includedPlugins.forEach(plugin => plugin.project?.(project));
    return project;
}
async function parsePlugin(plugin, logger) {
    if (typeof plugin === 'string') {
        try {
            let url = `/@id/${plugin}`;
            const version = new URL(import.meta.url).searchParams.get('v');
            if (version) {
                url += `?v=${version}`;
            }
            plugin = (await import(/* webpackIgnore: true */ /* @vite-ignore */ url)).default();
        }
        catch (e) {
            console.error(e);
            logger.error({
                message: `Failed to load plugin "${plugin}": ${e.message}.`,
                stack: e.stack,
                remarks: e.remarks,
            });
            return null;
        }
    }
    return plugin;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vdHN0cmFwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2FwcC9ib290c3RyYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxhQUFhLE1BQU0seUJBQXlCLENBQUM7QUFDcEQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN0QyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBRWhDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUUxRDs7Ozs7Ozs7Ozs7O0dBWUc7QUFDSCxNQUFNLFVBQVUsU0FBUyxDQUN2QixJQUFZLEVBQ1osUUFBa0IsRUFDbEIsT0FBaUIsRUFDakIsTUFBdUIsRUFDdkIsUUFBdUIsRUFDdkIsWUFBMkIsRUFDM0IsTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxNQUFNLEVBQUU7SUFFdEMsTUFBTSxRQUFRLEdBQUcsc0JBQXNCLEVBQUUsQ0FBQztJQUMxQyxZQUFZLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRTlCLE1BQU0sT0FBTyxHQUFHO1FBQ2QsSUFBSTtRQUNKLEdBQUcsTUFBTTtRQUNULE9BQU87UUFDUCxRQUFRO1FBQ1IsUUFBUTtRQUNSLE1BQU07UUFDTixZQUFZLEVBQUUsWUFBWTtLQUNoQixDQUFDO0lBRWIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE9BQU8sQ0FBQyxvQkFBb0IsS0FBNUIsT0FBTyxDQUFDLG9CQUFvQixHQUFLLEtBQUssRUFBQztJQUN2QyxRQUFRLENBQUMsTUFBTSxD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