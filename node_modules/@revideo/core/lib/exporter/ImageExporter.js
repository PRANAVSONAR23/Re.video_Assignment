var _a;
import { FileTypes } from '../app/presets';
import { EventDispatcher } from '../events';
import { BoolMetaField, EnumMetaField, NumberMetaField, ObjectMetaField, } from '../meta';
import { clamp } from '../tweening';
const EXPORT_FRAME_LIMIT = 256;
const EXPORT_RETRY_DELAY = 1000;
/**
 * Image sequence exporter.
 *
 * @internal
 */
export class ImageExporter {
    static meta() {
        const meta = new ObjectMetaField(this.name, {
            fileType: new EnumMetaField('file type', FileTypes),
            quality: new NumberMetaField('quality', 100)
                .setRange(0, 100)
                .describe('A number between 0 and 100 indicating the image quality.'),
            groupByScene: new BoolMetaField('group by scene', false).describe('Group exported images by scene. When checked, separates the sequence into subdirectories for each scene in the project.'),
        });
        meta.fileType.onChanged.subscribe(value => {
            meta.quality.disable(value === 'image/png');
        });
        return meta;
    }
    static async create(project, settings) {
        return new _a(project.logger, settings);
    }
    constructor(logger, settings) {
        this.logger = logger;
        this.settings = settings;
        this.frameLookup = new Set();
        this.handleResponse = ({ frame }) => {
            this.frameLookup.delete(frame);
        };
        const options = settings.exporter.options;
        this.projectName = settings.name;
        this.quality = clamp(0, 1, options.quality / 100);
        this.fileType = options.fileType;
        this.groupByScene = options.groupByScene;
    }
    async start() {
        _a.response.subscribe(this.handleResponse);
    }
    async handleFrame(canvas, frame, sceneFrame, sceneName, signal) {
        if (this.frameLookup.has(frame)) {
            this.logger.warn(`Frame no. ${frame} is already being exported.`);
            return;
        }
        if (import.meta.hot) {
            while (this.frameLookup.size > EXPORT_FRAME_LIMIT) {
                await new Promise(resolve => setTimeout(resolve, EXPORT_RETRY_DELAY));
                if (signal.aborted) {
                    return;
                }
            }
            this.frameLookup.add(frame);
            import.meta.hot.send('revideo:export', {
                frame,
                sceneFrame,
                data: canvas.toDataURL(this.fileType, this.quality),
                mimeType: this.fileType,
                subDirectories: this.groupByScene
                    ? [this.projectName, sceneName]
                    : [this.projectName],
                groupByScene: this.groupByScene,
            });
        }
    }
    async stop() {
        while (this.frameLookup.size > 0) {
            await new Promise(resolve => setTimeout(resolve, EXPORT_RETRY_DELAY));
        }
        _a.response.unsubscribe(this.handleResponse);
    }
}
_a = ImageExporter;
ImageExporter.id = '@revideo/core/image-sequence';
ImageExporter.displayName = 'Image sequence';
ImageExporter.response = new EventDispatcher();
(() => {
    if (import.meta.hot) {
        import.meta.hot.on('revideo:export-ack', response => {
            _a.response.dispatch(response);
        });
    }
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW1hZ2VFeHBvcnRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leHBvcnRlci9JbWFnZUV4cG9ydGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFdBQVcsQ0FBQztBQUMxQyxPQUFPLEVBQ0wsYUFBYSxFQUNiLGFBQWEsRUFDYixlQUFlLEVBQ2YsZUFBZSxHQUVoQixNQUFNLFNBQVMsQ0FBQztBQUNqQixPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sYUFBYSxDQUFDO0FBSWxDLE1BQU0sa0JBQWtCLEdBQUcsR0FBRyxDQUFDO0FBQy9CLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDO0FBUWhDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8sYUFBYTtJQUlqQixNQUFNLENBQUMsSUFBSTtRQUNoQixNQUFNLElBQUksR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQzFDLFFBQVEsRUFBRSxJQUFJLGFBQWEsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDO1lBQ25ELE9BQU8sRUFBRSxJQUFJLGVBQWUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxDQUFDO2lCQUN6QyxRQUFRLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQztpQkFDaEIsUUFBUSxDQUFDLDBEQUEwRCxDQUFDO1lBQ3ZFLFlBQVksRUFBRSxJQUFJLGFBQWEsQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQy9ELHlIQUF5SCxDQUMxSDtTQUNGLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUssV0FBVyxDQUFDLENBQUM7UUFDOUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFTSxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FDeEIsT0FBZ0IsRUFDaEIsUUFBMEI7UUFFMUIsT0FBTyxJQUFJLEVBQWEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFrQkQsWUFDbUIsTUFBYyxFQUNkLFFBQTBCO1FBRDFCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxhQUFRLEdBQVIsUUFBUSxDQUFrQjtRQVI1QixnQkFBVyxHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUE2RHpDLG1CQUFjLEdBQUcsQ0FBQyxFQUFDLEtBQUssRUFBaUIsRUFBRSxFQUFFO1lBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLENBQUMsQ0FBQztRQXJEQSxNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQStCLENBQUM7UUFDbEUsSUFBSSxDQUFDLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsT0FBTyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDakMsSUFBSSxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDO0lBQzNDLENBQUM7SUFFTSxLQUFLLENBQUMsS0FBSztRQUNoQixFQUFhLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVNLEtBQUssQ0FBQyxXQUFXLENBQ3RCLE1BQXlCLEVBQ3pCLEtBQWEsRUFDYixVQUFrQixFQUNsQixTQUFpQixFQUNqQixNQUFtQjtRQUVuQixJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDaEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxLQUFLLDZCQUE2QixDQUFDLENBQUM7WUFDbEUsT0FBTztRQUNULENBQUM7UUFDRCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDcEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxrQkFBa0IsRUFBRSxDQUFDO2dCQUNsRCxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RFLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUNuQixPQUFPO2dCQUNULENBQUM7WUFDSCxDQUFDO1lBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDNUIsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFO2dCQUN0QyxLQUFLO2dCQUNMLFVBQVU7Z0JBQ1YsSUFBSSxFQUFFLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDO2dCQUNuRCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7Z0JBQ3ZCLGNBQWMsRUFBRSxJQUFJLENBQUMsWUFBWTtvQkFDL0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUM7b0JBQy9CLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7Z0JBQ3RCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTthQUNoQyxDQUFDLENBQUM7UUFDTCxDQUFDO0lBQ0gsQ0FBQztJQUVNLEtBQUssQ0FBQyxJQUFJO1FBQ2YsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNqQyxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7UUFDeEUsQ0FBQztRQUNELEVBQWEsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUMxRCxDQUFDOzs7QUFqR3NCLGdCQUFFLEdBQUcsOEJBQThCLEFBQWpDLENBQWtDO0FBQ3BDLHlCQUFXLEdBQUcsZ0JBQWdCLEFBQW5CLENBQW9CO0FBMkI5QixzQkFBUSxHQUFHLElBQUksZUFBZSxFQUFrQixBQUF4QyxDQUF5QztBQUV6RTtJQUNFLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNwQixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsUUFBUSxDQUFDLEVBQUU7WUFDbEQsR0FBSyxRQUFRLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ25DLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztBQUNILENBQUMsR0FBQSxDQUFBIn0=