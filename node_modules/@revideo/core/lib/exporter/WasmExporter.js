import loadMp4Module from 'mp4-wasm';
import { ObjectMetaField } from '../meta';
export class WasmExporter {
    static async create(project, settings) {
        return new WasmExporter(project, settings);
    }
    constructor(project, settings) {
        this.project = project;
        this.settings = settings;
    }
    static meta() {
        return new ObjectMetaField(this.displayName, {});
    }
    async start() {
        const resp = await fetch('/@mp4-wasm');
        const buffer = await resp.arrayBuffer();
        const mp4 = await loadMp4Module({
            wasmBinary: buffer,
        });
        this.encoder = mp4.createWebCodecsEncoder({
            width: this.settings.size.x,
            height: this.settings.size.y,
            fps: this.project.meta.rendering.fps.get(),
        });
    }
    async handleFrame(canvas) {
        const frame = new VideoFrame(canvas, { timestamp: 0 });
        await this.encoder.addFrame(frame);
        frame.close();
    }
    async stop() {
        const buf = await this.encoder.end();
        const formData = new FormData();
        formData.append('file', new Blob([buf], { type: 'video/mp4' }), 'video.mp4');
        formData.append('tempDir', `revideo-${this.settings.name}-${this.settings.hiddenFolderId}`);
        await fetch('/uploadVideoFile', {
            method: 'POST',
            body: formData,
        });
    }
    async generateAudio(assets, startFrame, endFrame) {
        await fetch('/audio-processing/generate-audio', {
            method: 'POST',
            body: JSON.stringify({
                tempDir: `revideo-${this.settings.name}-${this.settings.hiddenFolderId}`,
                assets,
                startFrame,
                endFrame,
                fps: this.settings.fps,
            }),
        });
    }
    async mergeMedia() {
        const outputFilename = this.settings.name;
        const tempDir = `revideo-${this.settings.name}-${this.settings.hiddenFolderId}`;
        await fetch('/audio-processing/merge-media', {
            method: 'POST',
            body: JSON.stringify({
                outputFilename,
                tempDir,
            }),
        });
    }
}
WasmExporter.id = '@revideo/core/wasm';
WasmExporter.displayName = 'Video (Wasm)';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2FzbUV4cG9ydGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2V4cG9ydGVyL1dhc21FeHBvcnRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGFBQWEsTUFBTSxVQUFVLENBQUM7QUFHckMsT0FBTyxFQUFZLGVBQWUsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUduRCxNQUFNLE9BQU8sWUFBWTtJQUloQixNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFnQixFQUFFLFFBQTBCO1FBQ3JFLE9BQU8sSUFBSSxZQUFZLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxZQUNtQixPQUFnQixFQUNoQixRQUEwQjtRQUQxQixZQUFPLEdBQVAsT0FBTyxDQUFTO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQWtCO0lBQzFDLENBQUM7SUFFRyxNQUFNLENBQUMsSUFBSTtRQUNoQixPQUFPLElBQUksZUFBZSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLO1FBQ2hCLE1BQU0sSUFBSSxHQUFHLE1BQU0sS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3ZDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRXhDLE1BQU0sR0FBRyxHQUFHLE1BQU0sYUFBYSxDQUFDO1lBQzlCLFVBQVUsRUFBRSxNQUFNO1NBQ25CLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDLHNCQUFzQixDQUFDO1lBQ3hDLEtBQUssRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzNCLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzVCLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtTQUMzQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBSU0sS0FBSyxDQUFDLFdBQVcsQ0FBQyxNQUF5QjtRQUNoRCxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUUsRUFBQyxTQUFTLEVBQUUsQ0FBQyxFQUFDLENBQUMsQ0FBQztRQUNyRCxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU0sS0FBSyxDQUFDLElBQUk7UUFDZixNQUFNLEdBQUcsR0FBRyxNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFckMsTUFBTSxRQUFRLEdBQUcsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNoQyxRQUFRLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDM0UsUUFBUSxDQUFDLE1BQU0sQ0FDYixTQUFTLEVBQ1QsV0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUNoRSxDQUFDO1FBRUYsTUFBTSxLQUFLLENBQUMsa0JBQWtCLEVBQUU7WUFDOUIsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsUUFBUTtTQUNmLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUN4QixNQUFxQixFQUNyQixVQUFrQixFQUNsQixRQUFnQjtRQUVoQixNQUFNLEtBQUssQ0FBQyxrQ0FBa0MsRUFBRTtZQUM5QyxNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNuQixPQUFPLEVBQUUsV0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTtnQkFDeEUsTUFBTTtnQkFDTixVQUFVO2dCQUNWLFFBQVE7Z0JBQ1IsR0FBRyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRzthQUN2QixDQUFDO1NBQ0gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxVQUFVO1FBQ3JCLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzFDLE1BQU0sT0FBTyxHQUFHLFdBQVcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUVoRixNQUFNLEtBQUssQ0FBQywrQkFBK0IsRUFBRTtZQUMzQyxNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNuQixjQUFjO2dCQUNkLE9BQU87YUFDUixDQUFDO1NBQ0gsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFuRnNCLGVBQUUsR0FBRyxvQkFBb0IsQ0FBQztBQUMxQix3QkFBVyxHQUFHLGNBQWMsQ0FBQyJ9