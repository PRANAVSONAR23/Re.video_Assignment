var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Video_1;
import { BBox, DependencyContext, PlaybackState, viaProxy, } from '@revideo/core';
import Hls from 'hls.js';
import { computed, initial, nodeName, signal } from '../decorators';
import { drawImage } from '../utils';
import { ImageCommunication } from '../utils/video/ffmpeg-client';
import { dropExtractor, getFrame } from '../utils/video/mp4-parser-manager';
import { Media } from './Media';
let Video = Video_1 = class Video extends Media {
    constructor(props) {
        super(props);
        this.detectedFileType = 'unknown';
        this.fileTypeWasDetected = false;
        this.lastFrame = null;
    }
    desiredSize() {
        const custom = super.desiredSize();
        if (custom.x === null && custom.y === null) {
            const image = this.video();
            return {
                x: image.videoWidth,
                y: image.videoHeight,
            };
        }
        return custom;
    }
    mediaElement() {
        return this.video();
    }
    seekedMedia() {
        return this.seekedVideo();
    }
    fastSeekedMedia() {
        return this.fastSeekedVideo();
    }
    video() {
        const src = viaProxy(this.fullSource());
        const key = `${this.key}/${src}`;
        let video = Video_1.pool[key];
        if (!video) {
            video = document.createElement('video');
            video.crossOrigin = 'anonymous';
            if (src.endsWith('.m3u8')) {
                const hls = new Hls();
                hls.loadSource(src);
                hls.attachMedia(video);
            }
            else {
                video.src = src;
            }
            Video_1.pool[key] = video;
        }
        if (video.readyState < 2) {
            DependencyContext.collectPromise(new Promise(resolve => {
                const onCanPlay = () => {
                    resolve();
                    video.removeEventListener('canplay', onCanPlay);
                };
                const onError = () => {
                    const reason = this.getErrorReason(video.error?.code);
                    console.log(`ERROR: Error loading video: ${src}, ${reason}`);
                };
                video.addEventListener('canplay', onCanPlay);
                video.addEventListener('error', onError);
            }));
        }
        return video;
    }
    seekedVideo() {
        const video = this.video();
        const time = this.clampTime(this.time());
        video.playbackRate = this.playbackRate();
        if (!video.paused) {
            video.pause();
        }
        if (this.lastTime === time) {
            return video;
        }
        this.setCurrentTime(time);
        return video;
    }
    fastSeekedVideo() {
        const video = this.video();
        const time = this.clampTime(this.time());
        video.playbackRate = this.playbackRate();
        if (this.lastTime === time) {
            return video;
        }
        const playing = this.playing() && time < video.duration && video.playbackRate > 0;
        if (playing) {
            if (video.paused) {
                DependencyContext.collectPromise(video.play());
            }
        }
        else {
            if (!video.paused) {
                video.pause();
            }
        }
        // reseek when video is out of sync by more than one second
        if (Math.abs(video.currentTime - time) > 1) {
            this.setCurrentTime(time);
        }
        else if (!playing) {
            video.currentTime = time;
        }
        return video;
    }
    async webcodecSeekedVideo() {
        const video = this.video();
        const time = this.clampTime(this.time());
        video.playbackRate = this.playbackRate();
        if (this.lastFrame && this.lastTime === time) {
            return this.lastFrame;
        }
        const fps = this.view().fps() / this.playbackRate();
        return getFrame(this.key, video.src, time, fps);
    }
    async ffmpegSeekedVideo() {
        const video = this.video();
        const time = this.clampTime(this.time());
        const duration = this.getDuration();
        video.playbackRate = this.playbackRate();
        if (this.lastFrame && this.lastTime === time) {
            return this.lastFrame;
        }
        const fps = this.view().fps() / this.playbackRate();
        if (!Video_1.imageCommunication) {
            throw new Error('ServerSeekedVideo can only be used with HMR.');
        }
        const frame = await Video_1.imageCommunication.getFrame(this.key, video.src, time, duration, fps);
        this.lastFrame = frame;
        this.lastTime = time;
        return frame;
    }
    async seekFunction() {
        if (!this.fileTypeWasDetected) {
            this.detectedFileType = await this.detectFileType();
            this.fileTypeWasDetected = true;
        }
        const playbackState = this.view().playbackState();
        // During playback
        if (playbackState === PlaybackState.Playing ||
            playbackState === PlaybackState.Presenting) {
            return this.fastSeekedVideo();
        }
        if (playbackState === PlaybackState.Paused) {
            return this.seekedVideo();
        }
        // During rendering, if set explicitly
        if (this.decoder() === 'slow') {
            return this.seekedVideo();
        }
        if (this.decoder() === 'ffmpeg') {
            return this.ffmpegSeekedVideo();
        }
        if (this.decoder() === 'web') {
            return this.webcodecSeekedVideo();
        }
        // If not set explicitly, use detected file type to determine decoder
        if (this.detectedFileType === 'webm') {
            return this.ffmpegSeekedVideo();
        }
        if (this.detectedFileType === 'hls') {
            return this.seekedVideo();
        }
        return this.webcodecSeekedVideo();
    }
    async draw(context) {
        this.drawShape(context);
        const alpha = this.alpha();
        if (alpha > 0) {
            const video = await this.seekFunction();
            const box = BBox.fromSizeCentered(this.computedSize());
            context.save();
            context.clip(this.getPath());
            if (alpha < 1) {
                context.globalAlpha *= alpha;
            }
            context.imageSmoothingEnabled = this.smoothing();
            drawImage(context, video, box);
            context.restore();
        }
        if (this.clip()) {
            context.clip(this.getPath());
        }
        await this.drawChildren(context);
    }
    applyFlex() {
        super.applyFlex();
        const video = this.video();
        this.element.style.aspectRatio = (this.ratio() ?? video.videoWidth / video.videoHeight).toString();
    }
    remove() {
        super.remove();
        dropExtractor(this.key, this.video().src);
        return this;
    }
    async detectFileType() {
        if (this.fullSource().split('?')[0].endsWith('.mp4'))
            return 'mp4';
        if (this.fullSource().split('?')[0].endsWith('.webm'))
            return 'webm';
        if (this.fullSource().split('?')[0].endsWith('.m3u8'))
            return 'hls';
        if (this.fullSource().split('?')[0].endsWith('.mov'))
            return 'mov';
        if (this.fullSource().startsWith('http://') ||
            this.fullSource().startsWith('https://')) {
            try {
                const response = await fetch(this.fullSource(), { method: 'HEAD' });
                const contentType = response.headers.get('Content-Type');
                if (contentType) {
                    if (contentType.includes('video/mp4'))
                        return 'mp4';
                    if (contentType.includes('video/webm'))
                        return 'webm';
                    if (contentType.includes('video/quicktime'))
                        return 'mov';
                    if (contentType.includes('application/vnd.apple.mpegurl') ||
                        contentType.includes('application/x-mpegURL')) {
                        return 'hls';
                    }
                }
            }
            catch (error) {
                // do nothing
            }
        }
        console.warn(`WARNING: Could not detect file type of video (${this.fullSource()}), will default to using mp4 decoder. If your video file is no mp4 file, this will lead to an error - to fix this, reencode your video as an mp4 file (better performance) or specify a different decoder: https://docs.re.video/common-issues/slow-rendering#use-mp4-decoder`);
        return 'unknown';
    }
};
Video.pool = {};
Video.imageCommunication = !import.meta.hot
    ? null
    : new ImageCommunication();
__decorate([
    initial(1),
    signal()
], Video.prototype, "alpha", void 0);
__decorate([
    initial(true),
    signal()
], Video.prototype, "smoothing", void 0);
__decorate([
    initial(null),
    signal()
], Video.prototype, "decoder", void 0);
__decorate([
    computed()
], Video.prototype, "video", null);
__decorate([
    computed()
], Video.prototype, "seekedVideo", null);
__decorate([
    computed()
], Video.prototype, "fastSeekedVideo", null);
Video = Video_1 = __decorate([
    nodeName('Video')
], Video);
export { Video };
//# sourceMappingURL=data:application/json;base64,