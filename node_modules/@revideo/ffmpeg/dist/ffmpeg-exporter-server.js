"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FFmpegExporterServer = void 0;
const telemetry_1 = require("@revideo/telemetry");
const ffmpeg = require("fluent-ffmpeg");
const os = require("os");
const path = require("path");
const image_stream_1 = require("./image-stream");
const settings_1 = require("./settings");
/**
 * The server-side implementation of the FFmpeg video exporter.
 */
class FFmpegExporterServer {
    constructor(settings) {
        this.settings = settings;
        this.jobFolder = path.join(os.tmpdir(), `revideo-${this.settings.name}-${settings.hiddenFolderId}`);
        this.stream = new image_stream_1.ImageStream();
        ffmpeg.setFfmpegPath(settings_1.ffmpegSettings.getFfmpegPath());
        this.command = ffmpeg();
        // Input image sequence
        this.command
            .input(this.stream)
            .inputFormat('image2pipe')
            .inputFps(settings.fps);
        // Input audio file
        if (settings.includeAudio && settings.audio) {
            this.command
                .input(settings.audio.slice(1))
                // FIXME Offset only works for negative values.
                .inputOptions([`-itsoffset ${settings.audioOffset ?? 0}`]);
        }
        // Output settings
        const size = {
            x: Math.round(settings.size.x * settings.resolutionScale),
            y: Math.round(settings.size.y * settings.resolutionScale),
        };
        this.command
            .output(path.join(this.jobFolder, `visuals.mp4`))
            .outputOptions(['-pix_fmt yuv420p', '-shortest'])
            .outputFps(settings.fps)
            .size(`${size.x}x${size.y}`);
        if (settings.fastStart) {
            this.command.outputOptions(['-movflags +faststart']);
        }
        this.promise = new Promise((resolve, reject) => {
            this.command.on('end', resolve).on('error', reject);
        });
    }
    async start() {
        this.command.run();
    }
    async handleFrame({ data }) {
        const base64Data = data.slice(data.indexOf(',') + 1);
        this.stream.pushImage(Buffer.from(base64Data, 'base64'));
    }
    async end(result) {
        this.stream.pushImage(null);
        if (result === 1) {
            try {
                this.command.kill('SIGKILL');
                await this.promise;
            }
            catch (err) {
                (0, telemetry_1.sendEvent)(telemetry_1.EventName.Error, { message: err.message });
            }
        }
        else {
            await this.promise;
        }
    }
    async kill() {
        try {
            this.command.kill('SIGKILL');
            await this.promise;
        }
        catch (_) {
            return;
        }
    }
}
exports.FFmpegExporterServer = FFmpegExporterServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZtcGVnLWV4cG9ydGVyLXNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9mZm1wZWctZXhwb3J0ZXItc2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLGtEQUF3RDtBQUN4RCx3Q0FBd0M7QUFDeEMseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QixpREFBMkM7QUFDM0MseUNBQTBDO0FBVTFDOztHQUVHO0FBQ0gsTUFBYSxvQkFBb0I7SUFPL0IsWUFBbUIsUUFBZ0M7UUFDakQsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUN4QixFQUFFLENBQUMsTUFBTSxFQUFFLEVBQ1gsV0FBVyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsY0FBYyxFQUFFLENBQzNELENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksMEJBQVcsRUFBRSxDQUFDO1FBRWhDLE1BQU0sQ0FBQyxhQUFhLENBQUMseUJBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxDQUFDO1FBQ3JELElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFFeEIsdUJBQXVCO1FBQ3ZCLElBQUksQ0FBQyxPQUFPO2FBQ1QsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDbEIsV0FBVyxDQUFDLFlBQVksQ0FBQzthQUN6QixRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTFCLG1CQUFtQjtRQUNuQixJQUFJLFFBQVEsQ0FBQyxZQUFZLElBQUksUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzVDLElBQUksQ0FBQyxPQUFPO2lCQUNULEtBQUssQ0FBRSxRQUFRLENBQUMsS0FBZ0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzNDLCtDQUErQztpQkFDOUMsWUFBWSxDQUFDLENB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