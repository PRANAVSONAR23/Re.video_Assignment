"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeMedia = exports.generateAudio = void 0;
const ffmpeg = require("fluent-ffmpeg");
const fs = require("fs");
const os = require("os");
const path = require("path");
const settings_1 = require("./settings");
const utils_1 = require("./utils");
const SAMPLE_RATE = 48000;
function getAssetPlacement(frames) {
    const assets = [];
    // A map to keep track of the first and last currentTime for each asset.
    const assetTimeMap = new Map();
    for (let frame = 0; frame < frames.length; frame++) {
        for (const asset of frames[frame]) {
            if (!assetTimeMap.has(asset.key)) {
                // If the asset is not in the map, add it with its current time as both start and end.
                assetTimeMap.set(asset.key, {
                    start: asset.currentTime,
                    end: asset.currentTime,
                });
                assets.push({
                    key: asset.key,
                    src: asset.src,
                    type: asset.type,
                    startInVideo: frame,
                    endInVideo: frame,
                    duration: 0, // Placeholder, will be recalculated later based on frames
                    durationInSeconds: 0, // Placeholder, will be calculated based on currentTime
                    playbackRate: asset.playbackRate,
                    volume: asset.volume,
                    trimLeftInSeconds: asset.currentTime,
                });
            }
            else {
                // If the asset is already in the map, update the end time.
                const timeInfo = assetTimeMap.get(asset.key);
                if (timeInfo) {
                    timeInfo.end = asset.currentTime;
                    assetTimeMap.set(asset.key, timeInfo);
                }
                const existingAsset = assets.find(a => a.key === asset.key);
                if (existingAsset) {
                    existingAsset.endInVideo = frame;
                }
            }
        }
    }
    // Calculate the duration based on frame count and durationInSeconds based on currentTime.
    assets.forEach(asset => {
        const timeInfo = assetTimeMap.get(asset.key);
        if (timeInfo) {
            // Calculate durationInSeconds based on the start and end currentTime values.
            asset.durationInSeconds = timeInfo.end - timeInfo.start;
        }
        // Recalculate the original duration based on frame count.
        asset.duration = asset.endInVideo - asset.startInVideo + 1;
    });
    return assets;
}
function calculateAtempoFilters(playbackRate) {
    const atempoFilters = [];
    // Calculate how many times we need to 100x the speed
    let rate = playbackRate;
    while (rate > 100.0) {
        atempoFilters.push('atempo=100.0');
        rate /= 100.0;
    }
    // Add the last atempo filter with the remaining rate
    if (rate > 1.0) {
        atempoFilters.push(`atempo=${rate}`);
    }
    // Calculate how many times we need to halve the speed
    rate = playbackRate;
    while (rate < 0.5) {
        atempoFilters.push('atempo=0.5');
        rate *= 2.0;
    }
    // Add the last atempo filter with the remaining rate
    if (rate < 1.0) {
        atempoFilters.push(`atempo=${rate}`);
    }
    return atempoFilters;
}
async function prepareAudio(outputDir, tempDir, asset, startFrame, endFrame, fps) {
    // Construct the output path
    const sanitizedKey = asset.key.replace(/[/[\]]/g, '-');
    const outputPath = path.join(tempDir, `${sanitizedKey}.wav`);
    const trimLeft = asset.trimLeftInSeconds / asset.playbackRate;
    const trimRight = 1 / fps +
        Math.min(trimLeft + asset.durationInSeconds, trimLeft + (endFrame - startFrame) / fps);
    const padStart = (asset.startInVideo / fps) * 1000;
    const assetSampleRate = await (0, utils_1.getSampleRate)((0, utils_1.resolvePath)(outputDir, asset.src));
    const padEnd = Math.max(0, (assetSampleRate * (endFrame - startFrame + 1)) / fps -
        (assetSampleRate * asset.duration) / fps -
        (assetSampleRate * padStart) / 1000);
    const atempoFilters = calculateAtempoFilters(asset.playbackRate); // atempo filter value must be >=0.5 and <=100. If the value is higher or lower, this function sets multiple atempo filters
    const resolvedPath = (0, utils_1.resolvePath)(outputDir, asset.src);
    await new Promise((resolve, reject) => {
        const audioFilters = [
            ...atempoFilters,
            `atrim=start=${trimLeft}:end=${trimRight}`,
            `apad=pad_len=${padEnd}`,
            `adelay=${padStart}|${padStart}|${padStart}`,
            `volume=${asset.volume}`,
        ].join(',');
        ffmpeg.setFfmpegPath(settings_1.ffmpegSettings.getFfmpegPath());
        ffmpeg(resolvedPath)
            .audioChannels(2)
            .audioCodec('pcm_s16le')
            .audioFrequency(SAMPLE_RATE)
            .outputOptions([`-af`, audioFilters])
            .on('end', () => {
            resolve();
        })
            .on('error', err => {
            console.error(`Error processing audio for asset key: ${asset.key}`, err);
            reject(err);
        })
            .save(outputPath);
    });
    return outputPath;
}
async function mergeAudioTracks(tempDir, audioFilenames) {
    return new Promise((resolve, reject) => {
        ffmpeg.setFfmpegPath(settings_1.ffmpegSettings.getFfmpegPath());
        const command = ffmpeg();
        audioFilenames.forEach(filename => {
            command.input(filename);
        });
        command
            .complexFilter([
            `amix=inputs=${audioFilenames.length}:duration=longest,volume=${audioFilenames.length}`,
        ])
            .outputOptions(['-c:a', 'pcm_s16le'])
            .on('end', () => {
            resolve();
        })
            .on('error', err => {
            console.error(`Error merging audio tracks: ${err.message}`);
            reject(err);
        })
            .save(path.join(tempDir, `audio.wav`));
    });
}
async function generateAudio({ outputDir, tempDir, assets, startFrame, endFrame, fps, }) {
    const fullTempDir = path.join(os.tmpdir(), tempDir);
    await (0, utils_1.makeSureFolderExists)(outputDir);
    await (0, utils_1.makeSureFolderExists)(fullTempDir);
    const assetPositions = getAssetPlacement(assets);
    const audioFilenames = [];
    for (const asset of assetPositions) {
        let hasAudioStream = true;
        if (asset.type !== 'audio') {
            hasAudioStream = await (0, utils_1.checkForAudioStream)((0, utils_1.resolvePath)(outputDir, asset.src));
        }
        if (asset.playbackRate !== 0 && asset.volume !== 0 && hasAudioStream) {
            const filename = await prepareAudio(outputDir, fullTempDir, asset, startFrame, endFrame, fps);
            audioFilenames.push(filename);
        }
    }
    if (audioFilenames.length > 0) {
        await mergeAudioTracks(fullTempDir, audioFilenames);
    }
    return audioFilenames;
}
exports.generateAudio = generateAudio;
async function mergeMedia(outputFilename, outputDir, tempDir) {
    const fullTempDir = path.join(os.tmpdir(), tempDir);
    await (0, utils_1.makeSureFolderExists)(outputDir);
    await (0, utils_1.makeSureFolderExists)(fullTempDir);
    const audioWavExists = fs.existsSync(path.join(fullTempDir, `audio.wav`));
    if (audioWavExists) {
        await (0, utils_1.mergeAudioWithVideo)(path.join(fullTempDir, `audio.wav`), path.join(fullTempDir, `visuals.mp4`), path.join(outputDir, `${outputFilename}.mp4`));
    }
    else {
        const destination = path.join(outputDir, `${outputFilename}.mp4`);
        await fs.promises.copyFile(path.join(fullTempDir, `visuals.mp4`), destination);
    }
    if (fullTempDir.endsWith('-undefined')) {
        await fs.promises
            .rm(fullTempDir, { recursive: true, force: true })
            .catch(() => { });
    }
}
exports.mergeMedia = mergeMedia;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGUtYXVkaW8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2VuZXJhdGUtYXVkaW8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQ0Esd0NBQXdDO0FBQ3hDLHlCQUF5QjtBQUN6Qix5QkFBeUI7QUFDekIsNkJBQTZCO0FBQzdCLHlDQUEwQztBQUMxQyxtQ0FNaUI7QUFlakIsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO0FBRTFCLFNBQVMsaUJBQWlCLENBQUMsTUFBcUI7SUFDOUMsTUFBTSxNQUFNLEdBQWlCLEVBQUUsQ0FBQztJQUVoQyx3RUFBd0U7SUFDeEUsTUFBTSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQXdDLENBQUM7SUFFckUsS0FBSyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQztRQUNuRCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ2xDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO2dCQUNqQyxzRkFBc0Y7Z0JBQ3RGLFlBQVksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtvQkFDMUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxXQUFXO29CQUN4QixHQUFHLEVBQUUsS0FBSyxDQUFDLFdBQVc7aUJBQ3ZCLENBQUMsQ0FBQztnQkFDSCxNQUFNLENBQUMsSUFBSSxDQUFDO29CQUNWLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztvQkFDZCxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7b0JBQ2QsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJO29CQUNoQixZQUFZLEVBQUUsS0FBSztvQkFDbkIsVUFBVSxFQUFFLEtBQUs7b0JBQ2pCLFFBQVEsRUFBRSxDQUFDLEVBQUUsMERBQTBEO29CQUN2RSxp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